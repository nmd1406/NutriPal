import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:permission_handler/permission_handler.dart';
import "package:timezone/data/latest.dart" as tz;
import 'package:timezone/timezone.dart' as tz;

class NotificationService {
  static final FlutterLocalNotificationsPlugin _notifications =
      FlutterLocalNotificationsPlugin();

  static const int _waterReminderBaseId = 1000;

  Future<void> initialize() async {
    tz.initializeTimeZones();

    const androidSettings = AndroidInitializationSettings(
      "@mipmap/ic_launcher",
    );
    const initSettings = InitializationSettings(android: androidSettings);
    await _notifications.initialize(initSettings);
    await _requestPermission();
  }

  Future<void> _requestPermission() async {
    await Permission.notification.request();

    if (await Permission.scheduleExactAlarm.isDenied) {
      await Permission.scheduleExactAlarm.request();
    }
  }

  Future<void> scheduleDailyWaterReminders() async {
    await cancelWaterReminders();

    const androidDetails = AndroidNotificationDetails(
      "water_reminder_daily",
      "Nh·∫Øc nh·ªü u·ªëng n∆∞·ªõc h√†ng ng√†y",
      channelDescription: "Th√¥ng b√°o nh·∫Øc nh·ªü u·ªëng n∆∞·ªõc t·ª´ 8h s√°ng ƒë·∫øn 8h t·ªëi",
      importance: Importance.high,
      priority: Priority.high,
      enableVibration: true,
      playSound: true,
    );

    const notificationDetails = NotificationDetails(android: androidDetails);

    final now = DateTime.now();
    final today = DateTime(now.year, now.month, now.day);

    for (int hour = 8; hour <= 20; hour++) {
      final scheduledTime = today.add(Duration(hours: hour));

      final actualScheduledTime = scheduledTime.isBefore(now)
          ? scheduledTime.add(const Duration(days: 1))
          : scheduledTime;

      final tz.TZDateTime tzScheduledTime = tz.TZDateTime.from(
        actualScheduledTime,
        tz.local,
      );

      final notificationId = _waterReminderBaseId + hour;

      await _notifications.zonedSchedule(
        notificationId,
        "üíß ƒê√£ ƒë·∫øn gi·ªù u·ªëng n∆∞·ªõc!",
        _getRandomWaterMessage(),
        tzScheduledTime,
        notificationDetails,
        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
        matchDateTimeComponents: DateTimeComponents.time,
      );
    }
  }

  String _getRandomWaterMessage() {
    final messages = [
      "B·∫°n ƒë√£ u·ªëng n∆∞·ªõc ch∆∞a? H√£y b·ªï sung n∆∞·ªõc ƒë·ªÉ duy tr√¨ s·ª©c kho·∫ª t·ªët nh·∫•t!",
      "ƒê·ª´ng qu√™n u·ªëng n∆∞·ªõc! C∆° th·ªÉ b·∫°n ƒëang c·∫ßn n∆∞·ªõc.",
      "Th·ªùi gian u·ªëng n∆∞·ªõc ƒë√£ ƒë·∫øn! üíß",
      "H√£y duy tr√¨ ƒë·ªß n∆∞·ªõc cho c∆° th·ªÉ b·∫°n!",
      "U·ªëng n∆∞·ªõc th∆∞·ªùng xuy√™n ƒë·ªÉ gi·ªØ g√¨n s·ª©c kh·ªèe!",
      "C∆° th·ªÉ b·∫°n c·∫ßn n∆∞·ªõc! H√£y u·ªëng m·ªôt ly n∆∞·ªõc ngay.",
    ];

    final now = DateTime.now();
    final index = now.hour % messages.length;
    return messages[index];
  }

  Future<void> cancelWaterReminders() async {
    for (int hour = 8; hour <= 20; hour++) {
      final notificationId = _waterReminderBaseId + hour;
      await _notifications.cancel(notificationId);
    }
  }

  Future<void> cancelAllNotifications() async {
    await _notifications.cancelAll();
  }
}
